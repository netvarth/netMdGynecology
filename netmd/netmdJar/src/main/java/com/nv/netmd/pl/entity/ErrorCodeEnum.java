/**
 * ErrorCodeEnum.java
 * 
 * @Author Linu Paul
 *
 * Aug 16, 2012
 *
 * Copyright (c) 2011-2012 Netvarth Technologies Pvt. Ltd.
 * All rights reserved
 *
 */
package com.nv.netmd.pl.entity;
/**
 *
 *
 * @author Sreeram T G
 */
@SuppressWarnings("javadoc")
public enum ErrorCodeEnum {
	
	/*netmd error*/
	
	InvalidName("001","Name should not be null"),
	DatabaseError("002","Database operation failed"),
	UnknownEnum("003","Unknown name value for enum class"),	
	InvalidMailId("004","Email id is not valid"),
	InvalidPhoneFormat("005","Invalid phone"),
	InvalidId("006","Invalid Id"),
	InvalidDateFormat("007","Invalid date format"),
	InvalidFromToDate("008","Effective To date should be greater than Effective From date"),
	InvalidActionType("009","Invalid action type"),
	ExperienceNotExist("010","Requested  experience not exist"),
	QualificationNotExist("011","Requested  qualification not exist"),
	DoctorNotFound("012","Unknown doctor with id {id}"),
	PatientNotFound("013","Unknown patient with id {id}"),
	MedicalHistoryNotExist("014","Requested patient medical history not found"),
	InvalidTimeFormat("015","Invalid time format"),
	StartTimeGreater("016","Start time is greater than end time"),
	ScheduleAlreadyExist("017","Schedule already exist"),
	DoctorIdNotNull("018","Doctor is mandatory"),
	DoctorNull("019","Doctor with id {id} does not exist"),
	ScheduleNotExist("020","Schedule not exist"),
	InvalidSchedule("021","Invalid schedule"),
	AppointmentAlreadyExist("022","Appointment already exist"),
	InvalidAppointment("023","Invalid appointment"),
	NoAppointmentFound("024","No appointment found with the id {id}"),
	NoScheduleFound("024","No schedule found with the id {id}"),
	UserExists("025","User already exists"),
	UserNameNull("026","Enter your email address"),
	PasswordNull("027","Enter your password"),
	UserTypeNull("028","User type should not be null"),
	InvalidGlobalId("029","Invalid  Global Id"),
	NetMdIdNull("030","Netmd Id should not be null"),
	PassPhraseNull("031","Passphrase should not be null"),
	ResultNotFound("032","Unknown result with id {id}"),
	InvalidSortBy("033","Invalid sort by field {sortBy}"),
	InvalidFilterExpName("034","Invalid  name {propertyName}"),
	InvalidFilterExpValue("035","Invalid value for expression having name {propertyName}"),
	InvalidFilterExpOperator("036","Invalid  operator {operator} for expression having name {propertyName}"),
	InvalidGender("037","Invalid gender "),
	SeriesIdNotNull("038","Series id should not be null"),
	ScheduleIdNotNull("039","Schedule is mandatory"),
	SeriesWithIdNotExist("040","Series with {id} does not exist"),
	SeriesNotExist("041","Series does not exist"),
	UserNull("042","Invalid Username or Password"),
	StartDateGreater("043","Start date is greater than end date"),
	InvalidUserType("044","Invalid user type"),
	CaseIdNull("045","Case Id should not be null"),
	PatientIdNull("046","Patient Id should not be null"),
	MedicalRecordNull("047","Medical record should not be empty"),
	CaseNotFound("048","Unknown case with id {id}"),
	InvalidMedicalRecordType("049","Invalid medical record type"),
	InvalidCaseStatusType("050","Invalid case status type"),
	MedicalRecordNotFound("051","Medical record with id {id} doesnot exist"),
	InvalidAchievement("052","Achievement should not be null"),
	InvalidExpertise("053","Expertise should not be null"),
	InvalidMemberShip("054","MemberShip should not be null"),
	InvalidAppointmentStatus("055","Invalid appointment status"),
	InvalidOccuranceType("056","Invalid occurance type"),
	InvalidScheduleStatus("057","Invalid schedule status"),
	InvalidStatus("058","Invalid status"),
	HostUnknown("059","Host is unknown"),
	MacIdAlreadyExist("059","Mac id already exist,Do you want to install again ?"),
	EmptyRequest("060","Empty request"),
	EmailNull("061","Email id should not be null"),
	GlobalIdNull("062","Global id is empty"),
	DoctorGlobalIdNull("063","Doctor global id is empty"),
	PatientGlobalIdNull("064","Patient global id is empty"),
	ScheduleGlobalIdNull("065","Schedule global id is empty"),
	MessageNotExist("066","Message with id{id} not exist"),
	InvalidRepeatType("067","Invalid repeat type"),
	ScheduleDetailNull("068","There is no details for creating schedule"),
	ScheduleStartDateNull("069","Schedule start date should not be null"),
	ScheduleStartTimeNull("070","Schedule start time should not be null"),
	ScheduleEndTimeNull("071","Schedule end date should not be null"),
	ScheduleStatusNull("072","Schedule status not given"),
	SeriesGlobalIdNull("073","Series global id is empty"),
	DoctorWithEmailExist("074","Doctor with this email is already exist"),
	PatientWithEmailExist("075","Patient with this email is already exist"),
	ResultNull("076","Result should not be empty"),
	LoginWithIdNotExist("077","Login with id {id} does not exist"),
	NotPrimaryDevice("078","This is not a primary device"),
	InvalidPageKey("079","Page key not match"),
	DepartmentWithNameExist("080","Department with name{name} already exist"),
	DepartmentIdNull("081","Department id should not null"),
	NoDepartmentFound("082","No department found with the id {id}"),
	BlockWithNameExist("083","Block with name{name} already exist"),
	BlockIdNull("084","Block id should not null"),
	NoBlockFound("085","No block found with the id {id}"),
	RoomRentShouldNotBeNull("086","Room type rent should be valid"),
	RoomTypeIdNull("087","Room type id should not null"),
	RoomTypeWithTypeExist("088","Room type with type{type} already exist"),
	NoRoomTypeFound("089","No room type found with the id {id}"),
	RoomIdNull("090","Room id should not null"),
	RoomWithNameExist("091","Room with name{name} already exist"),
	NoRoomFound("092","No room found with the id {id}"),
	InvalidType("093","Invalid type "),
	BedWithTypeExist("094","Bed with type{type} already exist"),
	NoBedTypeFound("095","No bedType  found with the id{id}"),
	BedTypeIdNull("096","BedType id should not be null"),
	BedRentShouldNotBeNull("097","Bed rent should be valid"),
	InvalidBedNumeber("098","Invalid bed number"),
	BedNumberAlreadyExist("099","Bed number {name} already exist"),
	NoBedFound("100","No bed found with the id {id}"),
	InvalidAvailabilityType("101","Invalid availability"),
	InValidName("102","Invalid Name"),
	NoTaxFound("103","No tax found with the id{id}"),
	ItemIdNull("104","Item id should not null"),
	ItemWithNameExist("105","Item with name{name} already exist"),
	NoItemFound("106","No item found with the id {id}"),
	ServiceIdNull("107","Service id should not null"),
	ServiceWithNameExist("108","Service with name{name} already exist"),
	NoServiceFound("109","No service found with the id {id}"),
	PriceShouldNotBeNull("110","Price should not be negative value"),
	DiscountIdNull("111","Discount id should not null"),
	DiscountWithNameExist("112","Discount with name{name} already exist"),
	NoDiscountFound("113","No discount found with the id {id}"),
	InvalidDiscountType("114","Invalid discount type"),
	InvalidCalculationType("115","Invalid calculation type"),
	DiscountTypeMisMatch("116","Discount type does not match"),
	InvalidPaymentStatus("117","Payment status  given is "),
	BillItemIdShouldNotBeNull("118","Bill tem id should not be null"),
	BillSupportIdShouldNotBeNull("119","BIll support id should not be null"),
	BillBedIdShouldNotBeNull("120","Bill bed id should not be null"),
	BillQuantity("121","Quantity should not be null"),
	InvalidSeq("122","Invalid sequence id"),
	InvalidOrgin("123","Invalid bill type"),
	DiscountGreaterThanAmount("124","Discount value must be less than amount"),
	InvalidDiscountPercentage("125","Discount percentage should not be greater than 100"),
	NoBillFound("126","No bill found with the uid {id}"),
	QualitityNotNull("127","Quantity should not be zero"),
	BillUidNull("128","Bill uid should not null"),
	NoBillItemFound("129","No bill item found with id {id}"),
	NoBillSupportFound("130","No bill support found with id {id}"),
	NoBillBedFound("131","No bill bed found with id {id}"),
	InvalidDiscount("132","Invalid discount"),
	InvalidAmountForNetRateCalculation("133","Amount must be greater than zero to calculate net rate"),
	NoBillDiscountFound("134","No bill discount found with id {id}"),
	PaymentShouldNotZero("135","Payment should not be zero or negative value"),
	NoNote("136","Please provide note"),
	BedIdNull("137","Bed id should not null"),
	SupportIdNull("138","Support id should not null"),
	BillItemAlreadyExist("139","Bill item already exist"),
	BillSupportAlreadyExist("140","Bill support already exist"),
	BillBedAlreadyExist("141","Bill bed already exist"),
	BillDisccountAlreadyExist("142","Bill discount already exist"),
	OwnerNotFound("143","Unknown owner with id {id}"),
	AlreadyRegistred("144","Alredy registred"),
	ScheduleDateBefore("145","Cannot create schedule for pervious dates"),
	InvalidAmount("146","Amount must be greater than zero"),
	NoAdvanceFound("147","No advance found with id {id}"),
	BillShouldBeFullyPaid("148","Should Pay Full Amount"),
	PatientBillAlreadyExists("149","Bill for this patient is already opened" ),
	InvalidHeadName("150","Invalid head name"),
	HeadWithNameExist("151","Head with name already Exist"),
	NoHeadFound("152","No head found with id {id}"),
	HeadIdNull("153","Head Id should not be null"),
	InvalidHeadType("154","Invalid Head Type"),
	InvalidExpenseName("155","Invalid Expense Name"), 
	ExpenseWithNameExists("156","Expense with name already Exist"),
	NoExpenseFound("157","No expense found with id {id}"),
	ExpenseIdNull("158","Expense Id should not be null"),
	InvalidBloodGroup("159","Invalid Blood Group"),
	InvalidRhValue("160","Invalid Rh value"),
	InvalidEducation("161","Invalid Education"),
	DepartmentNotFound("162","Invalid Department"),
	InvalidAction("163","Invalid Action"),
	InvalidSettingName("164","Invalid name"),
	InvalidSettingUid("165","Invalid Setting id"),
	SettingNull("166","Setting does not exist"),
	SettingListNull("167","SettingList does not exist"),
	DateNull("168","Please select From and To date"),
	FromDateNull("169","From date is not selected"),
	ToDateNull("170","To date is not selected"),
	PaymentsNull("171","There is no payment reports to show"),
	ReportDateNull("172","Reports with date {date} does not exist"),
	BillstatusListEmpty("173","Bill Status list empty"), 
	Billstatus("174","Bill Status not given to the request"),
	BillstatusInvalid("175","Bill Status field value invalid"),
	CantUpdate("176","Can't update a cancelled bill"),
	NotTodaysOrder("177","Only todays bill can be cancelled"),
	BillstatusUid("178","Bill Status uid not given to the request"),
	BillstatusNotNull("179","Note field required"),
	UpdateBillStatusError("180","Bill Status field value invalid"),
	NetmdNotFound("181","No netmd found"),
	QuestionnaireNotFound("182","No Questionnaire found with id {id}"),
	DepartmentQuestionnaireNotFound("183","Department Questionnaire not found"),
	CaseAnswerSetNotExist("184","Case Answer set not found"),
	ConnectionFailed("185","Connection Failed"),
	INVALIDDATA("186","Insufficient Data"),
	AnswerListNull("187","Answer list is null"),
	PleaseDeleteCaseAnsMedRecord("188","Delete Cases and Medical records before deleting patient"),
	/*
	 * you never wait error message
	 */
	InvalidPassphrase("1201","Given passPhrase id is invalid"),
	MacIdNull("1202","Mac Id should not be null"),
	BranchMissMatch("1100","Given branch id {id} does not match"),
	NetMdMissMatch("1101","Given netMd id {id} does not match"),
	PatientBranchNull("1102","Patient with id {id} does not exist in the NetMd branch"),
	MacStatusNull("1103","Mac id does not exist"),
	LoginNotExists("1104","There is no login with userName {name}"),
	PatientDetailNull("1105","Patient details null"),
	InvalidPatientName("1106","Patient name does not exist"),
	PatientListEmpty("1107","There is no patients with name {name}"),
	DuplicateNetMd("1108","Netmd with name {name} already exists"),
	InvalidNetMdName("1109","You must enter valid name for netmd"),
	InvalidNumberOfDevices("1110","You must give how many number of devices each branch supports"),
	InvalidNetMdAccount("1111","You are using invalid netmd account"),
	NoNetmdExists("1112","No  Netmd created or updated after last synchronization time"),
	InvalidNetMdBranchId("1113","Given netMd branch id is invalid"),
	InvalidEmail("1114","You must enter valid email id"),
	InvalidNetMdUserName("1115","You must enter valid name for user"),
	NetMdUserAlreadyExists("1116","User with email {email} already exists!"),
	NetMdNameExists("1117","NetMd with name {name} already exists!"),
	InvalidHeader("1118","You must give valid header details"),
	InvalidUserDetail("1119","You must give valid user details"),
	NetMdUserAccountAlreadyExists("1120","User with username {user} already exists"),
	InvalidEndDate("1121","Invalid end date"),
	InvalidOccuranceTypes("1122","Invalid occurance type"),
	InvalidRepeatTypes("1123","Invalid repeat type"),
	InvalidNetMdId("1124","You must give valid netmd id"),
	ScheduleDetailsNull("1125","There is no details for creating schedule"),
	HeaderNull("1126","Header details should not be null"),
	SchedulesStartDateNull("1127","Schedule start date should not be null"),
	SchedulesStartTimeNull("1128","Schedule start time should not be null"),
	SchedulesEndTimeNull("1129","Schedule end date should not be null"),
	SchedulesStatusNull("1130","Schedule status not given"),
	InvalidDoctorId("1131","Invalid doctor Id"),
	ScheduleSeriesNull("1132","Schedule series should not be null"),
	OccuranceTypeNull("1133","Occurance type should not be null"),
	RepeatTypeNull("1134","Repeat mode should not be null"),
	NetMdIdInvalid("1135","Given Netmd id is invalid"),
	InActiveNetmdAccount("1136","You are using inactive Netmd account"),
	InvalidSeriesId("1137","Invalid  schedule series id"),
	InvalidNetMdUser("1138","User with id {id} does not exists in this netmd branch"),
	DoctorLoginNull("1139","No login provided for this doctor {name}"),
	MacIdExists("1140","You have already installed the application using this passPhrase {passPhrase}"),
	SyncTimeNull("1141","Synchronization time should be given"),
	EmailsNull("1142","Email id should not be null"),
	InvalidAchievements("1143"," Doctor achievements should not be null"),
	InvalidMemberShips("1144","Doctor memberships should not be null"),
	InvalidExpertises("1145","Doctor expertise should not be null"),
	DoctorEmailExists("1150","Doctor with this mail id {email} already exists"),
	LoginExists("1151","Username and Password already exists"),
	InvalidUserId("1152","Invalid format of user id"),
	InvalidFromTime("1153","Schedule start time should not be greater than end time"),
	ScheduleAlreadyExists("1154","Schedule with date {date} already exist"),
	InvalidLocalSeriesId("1155","Invalid series id"),
	InvalidDoctorLogin("1156","Doctor with login id {id} does not exist"),
	LoginNotNull("1157","Login details should not be null"),
	ActivationFailed("1158","Activation Failed"),
	
	;
	
	private String errCode;
	private String errMsg;


	private ErrorCodeEnum(String errCode, String errMsg) {
		this.errCode = errCode;
		this.errMsg = errMsg;
	}
	public String getErrCode() {
		return errCode;
	}
	public void setErrCode(String errCode) {
		this.errCode = errCode;
	}
	public String getErrMsg() {
		return errMsg;
	}
	public void setErrMsg(String errMsg) {
		this.errMsg = errMsg;
	}

}
